generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("DATABASE_URL")
//   directUrl = env("DIRECT_URL")
// }

enum UserRole {
  ADMIN
  SELLER
  USER
}

model User {
  id            String    @id @unique @default(uuid())
  email         String    @unique
  password      String?
  name          String?
  username      String?
  gender        String?
  dateOfBirth   DateTime?
  role          UserRole  @default(USER)
  emailVerified DateTime?
  firstName     String?
  lastName      String?
  profileImage  String?
  image         String?
  phone         String?

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product               Product[]
  orders                Order[]
  address               Address[]
  billingAddress        BillingAddress[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Customer {
  id String @id @default(uuid())

  email     String @unique
  firstName String
  lastName  String

  createdAt DateTime @default(now())

  phone String

  billingAddress BillingAddress[]
  address        Address[]
  orders         Order[]
}

model Product {
  id   String @id @default(uuid())
  name String

  price              Int
  originalPrice      Int? // Store the original price before discount
  discountAmount     Int? // Store the discount amount
  discountPercentage Int? // Store the discount percentage

  description      Json
  status           ProductStatus
  images           String[]
  isFeatured       Boolean       @default(false)
  smallDescription String?

  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  piatra String?

  productCategoryId Int?
  productCategory   ProductCategory? @relation(fields: [productCategoryId], references: [id])
  OrderProduct      OrderProduct[]
}

enum ProductStatus {
  draft
  published
  archived
}

model ProductCategory {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime?         @updatedAt
  name             String
  slug             String
  image            String?
  description      String?           @db.Text
  tier             Int               @default(1)
  parentCategoryId Int?
  parentCategory   ProductCategory?  @relation("ProductCategoryToProductCategory", fields: [parentCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subcategories    ProductCategory[] @relation("ProductCategoryToProductCategory")
  products         Product[]

  @@unique([name, parentCategoryId])
  @@unique([slug])
  @@index([tier])
  @@map("productCategories")
}

model Order {
  id             String      @id @default(uuid())
  status         OrderStatus @default(pending)
  orderNumber    Int         @unique
  shippingMethod String
  payment        String
  amount         Int
  verify         String
  userId         String?
  customerId     String?
  fulfilled      Fulfilled   @default(Unfulfilled)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime?   @updatedAt

  // Relații cu User și Customer
  User     User?     @relation(fields: [userId], references: [id])
  Customer Customer? @relation(fields: [customerId], references: [id])

  // Relație cu produsele comandate
  products OrderProduct[]

  // Relații cu adresele de livrare și facturare
  shippingAddressId Int?
  billingAddressId  Int?
  shippingAddress   Address?        @relation(fields: [shippingAddressId], references: [id])
  billingAddress    BillingAddress? @relation(fields: [billingAddressId], references: [id])
}

enum Fulfilled {
  Fulfilled
  Unfulfilled
}

model OrderProduct {
  id String @id @default(uuid())

  orderId   String
  productId String
  quantity  Int
  Product   Product @relation(fields: [productId], references: [id])
  Order     Order   @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
  pending
  completed
  cancelled
  refunded
}

enum shippingMethod {
  free
  dhl
}

model Address {
  id Int @id @default(autoincrement())

  address    String
  address2   String?
  postalCode String?
  city       String
  county     String
  country    String
  company    String?

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  shippingOrders Order[]
}

model BillingAddress {
  id Int @id @default(autoincrement())

  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String?
  company    String?
  city       String
  county     String
  country    String
  phone      String

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  billingOrders Order[]
}

model HomePage {
  id          String     @id @default(uuid())
  bannerTop   BannerTop? @relation(fields: [bannerTopId], references: [id])
  bannerTopId Int?

  @@unique([id])
}

model BannerTop {
  id Int @id @default(autoincrement())
  image String
  description Json?

  homePage HomePage[]
}
