generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  ADMIN
  SELLER
  USER
}

model User {
  id            String    @id @unique @default(uuid())
  email         String    @unique
  password      String?
  // name          String?
  username      String?
  gender        String?
  dateOfBirth   DateTime?
  role          UserRole  @default(USER)
  emailVerified DateTime?
  firstName     String?
  lastName      String?
  profileImage  String?
  image         String?
  phone         String?

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product               Product[]
  orders                Order[]
  address               Address[]
  persoanaJuridica      PersoanaJuridica[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  AdresaFacturare       AdresaFacturare[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Customer {
  id String @id @default(uuid())

  email     String @unique
  firstName String
  lastName  String

  createdAt DateTime @default(now())

  mobilePhone String

  address          Address[]
  orders           Order[]
  persoanaJuridica PersoanaJuridica[]
  AdresaFacturare  AdresaFacturare[]
}

model Product {
  id   String @id @default(uuid())
  name String

  price              Int
  originalPrice      Int? // Store the original price before discount
  discountAmount     Int? // Store the discount amount
  discountPercentage Int? // Store the discount percentage

  trackQuantity Boolean @default(false)

  description      Json
  status           ProductStatus
  images           String[]
  isFeatured       Boolean       @default(false)
  smallDescription String?

  createdAt   DateTime     @default(now())
  User        User?        @relation(fields: [userId], references: [id])
  userId      String?
  productTags ProductTag[] @relation("ProductToProductTag")

  materialId Int?
  material   Material? @relation(fields: [materialId], references: [id])

  piatra String?

  inventory   Inventory? @relation(fields: [inventoryId], references: [id]) // 1 to 1 relation
  inventoryId Int?       @unique

  productCategory   ProductCategory? @relation(fields: [productCategoryId], references: [id])
  productCategoryId Int?

  OrderProduct OrderProduct[]
}

enum ProductStatus {
  draft
  published
  archived
}

model Inventory {
  id Int @id @default(autoincrement())

  sku String @unique // SKU-ul este unic pentru fiecare intrare în inventar

  unavailable Unavailable? // 1 to 1 relation, no need for `fields` or `references` here

  committed Int @default(0)
  available Int @default(0)
  onHand    Int @default(0)

  product Product?
}

model Unavailable {
  id Int @id @default(autoincrement())

  damaged        Int @default(0)
  qualityControl Int @default(0)
  safetyStock    Int @default(0)
  other          Int @default(0)

  inventory   Inventory? @relation(fields: [inventoryId], references: [id])
  inventoryId Int?       @unique // Make inventoryId unique to ensure 1-to-1 relation
}

model Tag {
  id       Int          @id @default(autoincrement())
  name     String
  slug     String       @unique
  products ProductTag[] @relation("TagToProductTag") // Relație inversă către ProductTag

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductTag {
  id        Int    @id @default(autoincrement())
  productId String
  tagId     Int

  product Product @relation("ProductToProductTag", fields: [productId], references: [id])
  tag     Tag     @relation("TagToProductTag", fields: [tagId], references: [id])
}

model Material {
  id        Int       @id @default(autoincrement())
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updetedAt DateTime  @updatedAt
}

model ProductCategory {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime?         @updatedAt
  name             String
  slug             String
  image            String?
  description      String?           @db.Text
  tier             Int               @default(1)
  isFeatured       Boolean           @default(false)
  parentCategoryId Int?
  parentCategory   ProductCategory?  @relation("ProductCategoryToProductCategory", fields: [parentCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subcategories    ProductCategory[] @relation("ProductCategoryToProductCategory")
  products         Product[]

  @@unique([name, parentCategoryId])
  @@unique([slug])
  @@index([tier])
  @@map("productCategories")
}

model Order {
  id             String      @id @default(uuid())
  status         OrderStatus @default(pending)
  orderNumber    Int         @unique
  shippingMethod String
  payment        String
  amount         Int
  verify         String
  tipPersoana    String?
  userId         String?
  customerId     String?
  fulfilled      Fulfilled   @default(Unfulfilled)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime?   @updatedAt

  // Relații cu User și Customer
  User     User?     @relation(fields: [userId], references: [id])
  Customer Customer? @relation(fields: [customerId], references: [id])

  // Relație cu produsele comandate
  products OrderProduct[]

  // Relații cu adresele de livrare și facturare
  shippingAddressId Int?
  dateFacturareId   Int?
  adresaFacturareId Int?

  shippingAddress Address?          @relation(fields: [shippingAddressId], references: [id])
  dateFacturare   PersoanaJuridica? @relation(fields: [dateFacturareId], references: [id])
  adresaFacturare AdresaFacturare?  @relation(fields: [adresaFacturareId], references: [id])
}

enum Fulfilled {
  Fulfilled
  Unfulfilled
}

model OrderProduct {
  id String @id @default(uuid())

  orderId   String
  productId String
  quantity  Int
  Product   Product @relation(fields: [productId], references: [id])
  Order     Order   @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
  pending
  completed
  cancelled
  refunded
}

enum shippingMethod {
  free
  dhl
}

model Address {
  id Int @id @default(autoincrement())

  phone String?

  strada     String
  numar      String
  bloc       String?
  scara      String?
  etaj       String?
  apartament String?

  localitate String
  judet      String
  codPostal  String?

  alteDetalii String?

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  shippingOrders Order[]
}

model AdresaFacturare {
  id Int @id @default(autoincrement())

  strada     String
  numar      String
  bloc       String?
  scara      String?
  etaj       String?
  apartament String?

  localitate String
  judet      String
  codPostal  String?

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  adresaFacturareOrders Order[]
}

model PersoanaJuridica {
  id Int @id @default(autoincrement())

  numeFirma   String
  CIF         String
  nrRegComert String

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  dateFacturare Order[]
}

model BannerTop {
  id          Int     @id @default(autoincrement())
  image       String
  description Json?
  on          Boolean @default(false)
}

model Newsletter {
  id Int @id @default(autoincrement())

  email String @unique
}
